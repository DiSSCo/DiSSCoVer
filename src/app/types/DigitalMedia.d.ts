/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface DigitalMedia {
  /**
   * The unique identifier of the object
   */
  "@id": string;
  /**
   * The type of the object, in this cas ods:DigitalMedia
   */
  "@type": "ods:DigitalMedia";
  /**
   * The unique digital identifier of the object
   */
  "ods:ID": string;
  /**
   * The version of the object, each change generates a new version
   */
  "ods:version": number;
  /**
   * The status of the Digital Object
   */
  "ods:status"?: "ods:Draft" | "ods:Active" | "ods:Tombstone";
  /**
   * The timestamp that the object was last changed, which resulted in a new version of the object
   */
  "dcterms:modified": string;
  /**
   * The timestamp that the object was created in DiSSCo
   */
  "dcterms:created": string;
  /**
   * The DOI to the FDO type of the object
   */
  "ods:type"?: string;
  /**
   * https://purl.org/dc/terms/type
   */
  "dcterms:type"?:
    | "Collection"
    | "Dataset"
    | "Event"
    | "Image"
    | "InteractiveResource"
    | "MovingImage"
    | "PhysicalObject"
    | "Service"
    | "Software"
    | "Sound"
    | "StillImage"
    | "Text";
  /**
   * https://rs.tdwg.org/ac/terms/accessURI
   */
  "ac:accessURI": string;
  /**
   * The handle to the source system object which retrieved the data from the CMS
   */
  "ods:sourceSystemID": string;
  /**
   * The name of the source system as provided to DiSSCo
   */
  "ods:sourceSystemName"?: string;
  /**
   * ROR or Wikidata identifie of the organisation
   */
  "ods:organisationID"?: string;
  /**
   * Full museum name according to ROR or Wikidata
   */
  "ods:organisationName"?: string;
  /**
   * https://purl.org/dc/terms/format
   */
  "dcterms:format"?: string;
  /**
   * https://purl.org/dc/terms/license
   */
  "dcterms:license"?: string;
  /**
   * https://purl.org/dc/terms/description
   */
  "dcterms:description"?: string;
  /**
   * https://purl.org/dc/terms/rights
   */
  "dcterms:rights"?: string;
  /**
   * https://purl.org/dc/terms/accessRights
   */
  "dcterms:accessRights"?: string;
  /**
   * https://purl.org/dc/terms/rightsHolder
   */
  "dcterms:rightsHolder"?: string;
  /**
   * https://purl.org/dc/terms/source
   */
  "dcterms:source"?: string;
  /**
   * https://purl.org/dc/elements/1.1/creator
   */
  "dcterms:creator"?: string;
  /**
   * Contains zero or more ods:Assertion objects
   */
  "ods:hasAssertion"?: Assertion[];
  /**
   * Contains zero or more ods:Citation objects
   */
  "ods:hasCitation"?: Citation[];
  /**
   * Contains zero or more ods:Identifier objects
   */
  "ods:hasIdentifier"?: Identifier1[];
  /**
   * Contains zero or more ods:EntityRelationship objects
   */
  "ods:hasEntityRelationship"?: EntityRelationship[];
  /**
   * Contains zero or more ods:Agent objects
   */
  "ods:hasAgent"?: Agent3[];
  "ods:TombstoneMetadata"?: TombstoneMetadata;
  [k: string]: unknown;
}
export interface Assertion {
  /**
   * The identifier for the Assertion object.
   */
  "@id"?: string;
  /**
   * The type of the digital object, in this case a ods:Assertion
   */
  "@type": "ods:Assertion";
  /**
   * https://rs.tdwg.org/dwc/terms/measurementID
   */
  "dwc:measurementID"?: string;
  /**
   * https://rs.tdwg.org/dwc/terms/parentMeasurementID
   */
  "dwc:parentMeasurementID"?: string;
  /**
   * https://rs.tdwg.org/dwc/terms/measurementType
   */
  "dwc:measurementType"?: string;
  /**
   * https://rs.tdwg.org/dwc/iri/measurementType
   */
  "dwciri:measurementType"?: string;
  /**
   * https://rs.tdwg.org/dwc/terms/measurementDeterminedDate
   */
  "dwc:measurementDeterminedDate"?: string;
  /**
   * https://rs.tdwg.org/dwc/terms/measurementValue
   */
  "dwc:measurementValue"?: string;
  /**
   * https://rs.tdwg.org/dwc/terms/measurementValue
   */
  "dwciri:measurementValue"?: string;
  /**
   * https://rs.tdwg.org/dwc/terms/measurementAccuracy
   */
  "dwc:measurementAccuracy"?: string;
  /**
   * https://rs.tdwg.org/dwc/terms/measurementUnit
   */
  "dwc:measurementUnit"?: string;
  /**
   * https://rs.tdwg.org/dwc/iri/measurementUnit
   */
  "dwciri:measurementUnit"?: string;
  "ods:AssertionByAgent"?: Agent;
  /**
   * The protocol used to make the assertion
   */
  "ods:assertionProtocol"?: string;
  /**
   * The ID of the protocol used to make the assertion
   */
  "ods:assertionProtocolID"?: string;
  /**
   * Remarks about the assertion
   */
  "ods:assertionRemarks"?: string;
}
/**
 * The agent who made the assertion, contains an ods:Agent object
 */
export interface Agent {
  /**
   * The identifier for the Agent object
   */
  "@id"?: string;
  /**
   * The type of the agent, the prov ontology is only used in the prov-o createUpdateTombstoneEvent
   */
  "@type": "schema:Person" | "schema:Organisation" | "as:Application" | "prov:Person" | "prov:SoftwareAgent";
  /**
   * Full name of the agent
   */
  "schema:name"?: string;
  /**
   * Indicates the role of the agent, https://schema.org/roleName
   */
  "schema:roleName"?: string;
  /**
   * Date the agent began the role
   */
  "schema:startDate"?: string;
  /**
   * Date the agent ended the role
   */
  "schema:endDate"?: string;
  /**
   * Order of the agent in the role. Can be used to indicate the order of importance
   */
  "ods:roleOrder"?: number;
  /**
   * Email of the agent, can be present in case the agent is a maintainer of a MAS
   */
  "schema:email"?: string;
  /**
   * URL of the agent, can be present in case the agent is a maintainer of a MAS
   */
  "schema:url"?: string;
  /**
   * Contains zero or more ods:Identifier objects
   */
  "ods:hasIdentifier"?: Identifier[];
}
/**
 * Based on https://rs.gbif.org/extension/gbif/1.0/identifier.xml but includes ods specific terms
 */
export interface Identifier {
  /**
   * The identifier for the Identifier object.
   */
  "@id"?: string;
  /**
   * The type of the digital object, in this case a ods:Identifier
   */
  "@type": "ods:Identifier";
  /**
   * The type of the identifier, https://purl.org/dc/elements/1.1/title
   */
  "dcterms:title": string;
  /**
   * The local title of the identifier
   */
  "ods:localTitle"?: string;
  /**
   * The value for the identifier, https://purl.org/dc/terms/identifier
   */
  "dcterms:identifier": string;
  /**
   * Mime type of content returned by identifier in case the identifier is resolvable. https://purl.org/dc/terms/format
   */
  "dcterms:format"?: string;
  /**
   * Keywords qualifying the identifier https://purl.org/dc/terms/subject
   */
  "dcterms:subject"?: string;
  /**
   * Indicates whether the identifier is part of the physical label
   */
  "ods:isPartOfLabel"?: boolean;
  /**
   * Indicates whether the identifier is part of the barcode or nfc chip
   */
  "ods:isBarcodeOrNFC"?: boolean;
  /**
   * Indicates whether the identifier is a persistent identifier
   */
  "ods:isIDPersistent"?: boolean;
}
/**
 * Based on https://rs.gbif.org/extension/gbif/1.0/references.xml but includes ods specific terms
 */
export interface Citation {
  /**
   * The identifier for the Citation object.
   */
  "@id"?: string;
  /**
   * The type of the digital object, in this case a ods:Citation
   */
  "@type": "ods:Citation";
  /**
   * https://purl.org/dc/terms/identifier
   */
  "dcterms:identifier"?: string;
  /**
   * https://purl.org/dc/terms/type
   */
  "dcterms:type"?: string;
  /**
   * https://purl.org/dc/terms/date
   */
  "dcterms:date"?: string;
  /**
   * https://purl.org/dc/terms/title
   */
  "dcterms:title"?: string;
  "dcterms:creator"?: Agent1;
  /**
   * Page number of the citation
   */
  "ods:citationPageNumber"?: string;
  /**
   * Any further remarks about the citation
   */
  "ods:citationRemarks"?: string;
  /**
   * The type of reference
   */
  "ods:referenceType"?: string;
  /**
   * https://dublincore.org/usage/terms/history/#bibliographicCitation-002
   */
  "dcterms:bibliographicCitation"?: string;
  /**
   * The year the reference was published
   */
  "ods:referenceYear"?: number;
  /**
   * Reference to the web source of this citation
   */
  "ods:referenceIRI"?: string;
  /**
   * Is the citation peer reviewed?
   */
  "ods:isPeerReviewed"?: boolean;
}
/**
 * Contains an ods:Agent object
 */
export interface Agent1 {
  /**
   * The identifier for the Agent object
   */
  "@id"?: string;
  /**
   * The type of the agent, the prov ontology is only used in the prov-o createUpdateTombstoneEvent
   */
  "@type": "schema:Person" | "schema:Organisation" | "as:Application" | "prov:Person" | "prov:SoftwareAgent";
  /**
   * Full name of the agent
   */
  "schema:name"?: string;
  /**
   * Indicates the role of the agent, https://schema.org/roleName
   */
  "schema:roleName"?: string;
  /**
   * Date the agent began the role
   */
  "schema:startDate"?: string;
  /**
   * Date the agent ended the role
   */
  "schema:endDate"?: string;
  /**
   * Order of the agent in the role. Can be used to indicate the order of importance
   */
  "ods:roleOrder"?: number;
  /**
   * Email of the agent, can be present in case the agent is a maintainer of a MAS
   */
  "schema:email"?: string;
  /**
   * URL of the agent, can be present in case the agent is a maintainer of a MAS
   */
  "schema:url"?: string;
  /**
   * Contains zero or more ods:Identifier objects
   */
  "ods:hasIdentifier"?: Identifier[];
}
/**
 * Based on https://rs.gbif.org/extension/gbif/1.0/identifier.xml but includes ods specific terms
 */
export interface Identifier1 {
  /**
   * The identifier for the Identifier object.
   */
  "@id"?: string;
  /**
   * The type of the digital object, in this case a ods:Identifier
   */
  "@type": "ods:Identifier";
  /**
   * The type of the identifier, https://purl.org/dc/elements/1.1/title
   */
  "dcterms:title": string;
  /**
   * The local title of the identifier
   */
  "ods:localTitle"?: string;
  /**
   * The value for the identifier, https://purl.org/dc/terms/identifier
   */
  "dcterms:identifier": string;
  /**
   * Mime type of content returned by identifier in case the identifier is resolvable. https://purl.org/dc/terms/format
   */
  "dcterms:format"?: string;
  /**
   * Keywords qualifying the identifier https://purl.org/dc/terms/subject
   */
  "dcterms:subject"?: string;
  /**
   * Indicates whether the identifier is part of the physical label
   */
  "ods:isPartOfLabel"?: boolean;
  /**
   * Indicates whether the identifier is part of the barcode or nfc chip
   */
  "ods:isBarcodeOrNFC"?: boolean;
  /**
   * Indicates whether the identifier is a persistent identifier
   */
  "ods:isIDPersistent"?: boolean;
}
/**
 * Based on https://rs.gbif.org/extension/resource_relationship_2024-02-19.xml but with ods specific terms
 */
export interface EntityRelationship {
  /**
   * The identifier for Entity Relationship digital object.
   */
  "@id"?: string;
  /**
   * The type of the record, in this case a ods:EntityRelationship
   */
  "@type": "ods:EntityRelationship";
  /**
   * https://rs.tdwg.org/dwc/terms/relationshipOfResource
   */
  "dwc:relationshipOfResource": string;
  /**
   * https://rs.tdwg.org/dwc/terms/relationshipOfResourceID
   */
  "dwc:relationshipOfResourceID"?: string;
  /**
   * https://rs.tdwg.org/dwc/terms/relatedResourceID
   */
  "dwc:relatedResourceID": string;
  /**
   * The URI of the related resource
   */
  "ods:relatedResourceURI"?: string;
  /**
   * https://rs.tdwg.org/dwc/terms/relationshipEstablishedDate
   */
  "dwc:relationshipEstablishedDate"?: string;
  /**
   * When multiple relationships are added an order can be defined
   */
  "ods:entityRelationshipOrder"?: number;
  "ods:RelationshipAccordingToAgent"?: Agent2;
  /**
   * https://rs.tdwg.org/dwc/terms/relationshipAccordingTo
   */
  "dwc:relationshipAccordingTo"?: string;
  /**
   * https://rs.tdwg.org/dwc/terms/relationshipRemarks
   */
  "dwc:relationshipRemarks"?: string;
}
/**
 * The agent who created the entity relationship. Contains an ods:Agent object
 */
export interface Agent2 {
  /**
   * The identifier for the Agent object
   */
  "@id"?: string;
  /**
   * The type of the agent, the prov ontology is only used in the prov-o createUpdateTombstoneEvent
   */
  "@type": "schema:Person" | "schema:Organisation" | "as:Application" | "prov:Person" | "prov:SoftwareAgent";
  /**
   * Full name of the agent
   */
  "schema:name"?: string;
  /**
   * Indicates the role of the agent, https://schema.org/roleName
   */
  "schema:roleName"?: string;
  /**
   * Date the agent began the role
   */
  "schema:startDate"?: string;
  /**
   * Date the agent ended the role
   */
  "schema:endDate"?: string;
  /**
   * Order of the agent in the role. Can be used to indicate the order of importance
   */
  "ods:roleOrder"?: number;
  /**
   * Email of the agent, can be present in case the agent is a maintainer of a MAS
   */
  "schema:email"?: string;
  /**
   * URL of the agent, can be present in case the agent is a maintainer of a MAS
   */
  "schema:url"?: string;
  /**
   * Contains zero or more ods:Identifier objects
   */
  "ods:hasIdentifier"?: Identifier[];
}
export interface Agent3 {
  /**
   * The identifier for the Agent object
   */
  "@id"?: string;
  /**
   * The type of the agent, the prov ontology is only used in the prov-o createUpdateTombstoneEvent
   */
  "@type": "schema:Person" | "schema:Organisation" | "as:Application" | "prov:Person" | "prov:SoftwareAgent";
  /**
   * Full name of the agent
   */
  "schema:name"?: string;
  /**
   * Indicates the role of the agent, https://schema.org/roleName
   */
  "schema:roleName"?: string;
  /**
   * Date the agent began the role
   */
  "schema:startDate"?: string;
  /**
   * Date the agent ended the role
   */
  "schema:endDate"?: string;
  /**
   * Order of the agent in the role. Can be used to indicate the order of importance
   */
  "ods:roleOrder"?: number;
  /**
   * Email of the agent, can be present in case the agent is a maintainer of a MAS
   */
  "schema:email"?: string;
  /**
   * URL of the agent, can be present in case the agent is a maintainer of a MAS
   */
  "schema:url"?: string;
  /**
   * Contains zero or more ods:Identifier objects
   */
  "ods:hasIdentifier"?: Identifier[];
}
/**
 * Object containing the tombstone metadata of the object. Only present when ods:status is ods:Tombstone
 */
export interface TombstoneMetadata {
  /**
   * The type of the record, in this case a ods:Tombstone
   */
  "@type": "ods:Tombstone";
  /**
   * Timestamp the Digital Object was tombstoned and no longer active.
   */
  "ods:tombstoneDate": string;
  /**
   * A reason why the Digital Object was tombstoned
   */
  "ods:tombstoneText": string;
  "ods:TombstonedByAgent": Agent4;
  /**
   * The PIDs of the object the tombstoned object is related to
   */
  "ods:hasRelatedPID"?: {
    /**
     * The PID of the related object
     */
    "ods:ID"?: string;
    /**
     * The type of relationship between the tombstoned object and the related object
     */
    "ods:relationshipType"?: string;
    [k: string]: unknown;
  }[];
}
/**
 * The agent who tombstoned the object, contains an ods:Agent object
 */
export interface Agent4 {
  /**
   * The identifier for the Agent object
   */
  "@id"?: string;
  /**
   * The type of the agent, the prov ontology is only used in the prov-o createUpdateTombstoneEvent
   */
  "@type": "schema:Person" | "schema:Organisation" | "as:Application" | "prov:Person" | "prov:SoftwareAgent";
  /**
   * Full name of the agent
   */
  "schema:name"?: string;
  /**
   * Indicates the role of the agent, https://schema.org/roleName
   */
  "schema:roleName"?: string;
  /**
   * Date the agent began the role
   */
  "schema:startDate"?: string;
  /**
   * Date the agent ended the role
   */
  "schema:endDate"?: string;
  /**
   * Order of the agent in the role. Can be used to indicate the order of importance
   */
  "ods:roleOrder"?: number;
  /**
   * Email of the agent, can be present in case the agent is a maintainer of a MAS
   */
  "schema:email"?: string;
  /**
   * URL of the agent, can be present in case the agent is a maintainer of a MAS
   */
  "schema:url"?: string;
  /**
   * Contains zero or more ods:Identifier objects
   */
  "ods:hasIdentifier"?: Identifier[];
}
