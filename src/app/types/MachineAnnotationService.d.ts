/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Automated annotation services that enhance biodiversity data
 */
export interface MachineAnnotationService {
  /**
   * The unique identifier (handle) of the Machine Annotation Service object
   */
  "@id"?: string;
  /**
   * The type of the object, in this case ods:MachineAnnotationService
   */
  "@type": "ods:MachineAnnotationService";
  /**
   * Handle of the Machine Annotation Service
   */
  "ods:ID": string;
  /**
   * The DOI to the FDO type of the object
   */
  "ods:type": string;
  /**
   * The status of the Digital Object
   */
  "ods:status"?: "ods:Draft" | "ods:Active" | "ods:Tombstone";
  /**
   * Version of the Machine Annotation Service, https://schema.org/version
   */
  "schema:version"?: number;
  /**
   * Name of the Machine Annotation Service as provided by the user, https://schema.org/name
   */
  "schema:name": string;
  /**
   * Description of the Machine Annotation Service as provided by the user, https://schema.org/description
   */
  "schema:description"?: string;
  /**
   * Timestamp of creation. Internally generated, https://schema.org/dateCreated
   */
  "schema:dateCreated": string;
  /**
   * Timestamp of last modification. Internally generated, https://schema.org/dateModified
   */
  "schema:dateModified": string;
  "schema:creator"?: Agent;
  /**
   * URI of the image of the containerized application
   */
  "ods:containerImage": string;
  /**
   * Tag of the image
   */
  "ods:containerTag": string;
  /**
   * Filters describing the criteria that must be met in order to apply the MAS. No filters implies the MAS may run on *any* digital object. Field names are given in JSON paths, and accepted values for that field are provided as an arrays
   */
  "ods:TargetDigitalObjectFilter"?: {
    [k: string]: unknown;
  };
  /**
   * The current status of the service, https://schema.org/creativeWorkStatus
   */
  "schema:creativeWorkStatus"?: string;
  /**
   * Link to code base of MAS, https://schema.org/codeRepository
   */
  "schema:codeRepository"?: string;
  /**
   * The programming language of the MAS, https://schema.org/programmingLanguage
   */
  "schema:programmingLanguage"?: string;
  /**
   * Availability commitment of the service provider as described in the SLA
   */
  "ods:serviceAvailability"?: string;
  "schema:maintainer"?: Agent1;
  /**
   * License of the service, https://schema.org/license
   */
  "schema:license"?: string;
  /**
   * Handles from other MAS that this MAS depends on
   */
  "ods:dependency"?: string[];
  /**
   * The contact point for support and information for the MAS, https://schema.org/ContactPoint
   */
  "schema:ContactPoint"?: {
    /**
     * Description of the contact point, https://schema.org/description
     */
    "schema:description"?: string;
    /**
     * Email of the contact point, https://schema.org/email
     */
    "schema:email"?: string;
    /**
     * Email of the contact point, https://schema.org/email
     */
    "schema:url"?: string;
    /**
     * Telephone number of the contact point, https://schema.org/telephone
     */
    "schema:telephone"?: string;
    [k: string]: unknown;
  };
  /**
   * Link to SLA documentation
   */
  "ods:slaDocumentation"?: string;
  /**
   * Kafka topic through which the MAS receives messages. Defaults to PID of MAS
   */
  "ods:topicName"?: string;
  /**
   * The maximum amount of this MAS that can simultaneously run without causing issues
   */
  "ods:maxReplicas"?: number;
  /**
   * Whether or not this MAS can create Batch Annotations. MAS outputs must then comply with batchMetadata, see https://schemas.dissco.tech/schemas/annotations/0.1.0/annotation-event.json
   */
  "ods:batchingPermitted": boolean;
  /**
   * Time in milliseconds the MAS message may remain in the Kafka Queue before being marked as timed out. Min 1 hour.
   */
  "ods:timeToLive": number;
  "ods:TombstoneMetadata"?: TombstoneMetadata;
  /**
   * Environmental variables to supply to the MAS, non-sensitive
   */
  "ods:hasEnvironmentalVariable"?: EnvironmentalVariable[];
  /**
   * Secret variables to supply to the MAS
   */
  "ods:hasSecretVariable"?: SecretVariable[];
}
/**
 * Contains an ods:Agent object
 */
export interface Agent {
  /**
   * The identifier for the Agent object
   */
  "@id"?: string;
  /**
   * The type of the agent, the prov ontology is only used in the prov-o createUpdateTombstoneEvent
   */
  "@type": "schema:Person" | "schema:Organisation" | "as:Application" | "prov:Person" | "prov:SoftwareAgent";
  /**
   * Full name of the agent
   */
  "schema:name"?: string;
  /**
   * Indicates the role of the agent, https://schema.org/roleName
   */
  "schema:roleName"?: string;
  /**
   * Date the agent began the role
   */
  "schema:startDate"?: string;
  /**
   * Date the agent ended the role
   */
  "schema:endDate"?: string;
  /**
   * Order of the agent in the role. Can be used to indicate the order of importance
   */
  "ods:roleOrder"?: number;
  /**
   * Email of the agent, can be present in case the agent is a maintainer of a MAS
   */
  "schema:email"?: string;
  /**
   * URL of the agent, can be present in case the agent is a maintainer of a MAS
   */
  "schema:url"?: string;
  /**
   * Contains zero or more ods:Identifier objects
   */
  "ods:hasIdentifier"?: Identifier[];
}
/**
 * Based on https://rs.gbif.org/extension/gbif/1.0/identifier.xml but includes ods specific terms
 */
export interface Identifier {
  /**
   * The identifier for the Identifier object.
   */
  "@id"?: string;
  /**
   * The type of the digital object, in this case a ods:Identifier
   */
  "@type": "ods:Identifier";
  /**
   * The type of the identifier, https://purl.org/dc/elements/1.1/title
   */
  "dcterms:title": string;
  /**
   * The local title of the identifier
   */
  "ods:localTitle"?: string;
  /**
   * The value for the identifier, https://purl.org/dc/terms/identifier
   */
  "dcterms:identifier": string;
  /**
   * Mime type of content returned by identifier in case the identifier is resolvable. https://purl.org/dc/terms/format
   */
  "dcterms:format"?: string;
  /**
   * Keywords qualifying the identifier https://purl.org/dc/terms/subject
   */
  "dcterms:subject"?: string;
  /**
   * Indicates whether the identifier is part of the physical label
   */
  "ods:isPartOfLabel"?: boolean;
  /**
   * Indicates whether the identifier is part of the barcode or nfc chip
   */
  "ods:isBarcodeOrNFC"?: boolean;
  /**
   * Indicates whether the identifier is a persistent identifier
   */
  "ods:isIDPersistent"?: boolean;
}
/**
 * Party maintaining the code, could be an schema:Organisation or a schema:Person
 */
export interface Agent1 {
  /**
   * The identifier for the Agent object
   */
  "@id"?: string;
  /**
   * The type of the agent, the prov ontology is only used in the prov-o createUpdateTombstoneEvent
   */
  "@type": "schema:Person" | "schema:Organisation" | "as:Application" | "prov:Person" | "prov:SoftwareAgent";
  /**
   * Full name of the agent
   */
  "schema:name"?: string;
  /**
   * Indicates the role of the agent, https://schema.org/roleName
   */
  "schema:roleName"?: string;
  /**
   * Date the agent began the role
   */
  "schema:startDate"?: string;
  /**
   * Date the agent ended the role
   */
  "schema:endDate"?: string;
  /**
   * Order of the agent in the role. Can be used to indicate the order of importance
   */
  "ods:roleOrder"?: number;
  /**
   * Email of the agent, can be present in case the agent is a maintainer of a MAS
   */
  "schema:email"?: string;
  /**
   * URL of the agent, can be present in case the agent is a maintainer of a MAS
   */
  "schema:url"?: string;
  /**
   * Contains zero or more ods:Identifier objects
   */
  "ods:hasIdentifier"?: Identifier[];
}
/**
 * Object containing the tombstone metadata of the object
 */
export interface TombstoneMetadata {
  /**
   * The type of the record, in this case a ods:Tombstone
   */
  "@type": "ods:Tombstone";
  /**
   * Timestamp the Digital Object was tombstoned and no longer active.
   */
  "ods:tombstoneDate": string;
  /**
   * A reason why the Digital Object was tombstoned
   */
  "ods:tombstoneText": string;
  "ods:TombstonedByAgent": Agent2;
  /**
   * The PIDs of the object the tombstoned object is related to
   */
  "ods:hasRelatedPID"?: {
    /**
     * The PID of the related object
     */
    "ods:ID"?: string;
    /**
     * The type of relationship between the tombstoned object and the related object
     */
    "ods:relationshipType"?: string;
    [k: string]: unknown;
  }[];
}
/**
 * The agent who tombstoned the object, contains an ods:Agent object
 */
export interface Agent2 {
  /**
   * The identifier for the Agent object
   */
  "@id"?: string;
  /**
   * The type of the agent, the prov ontology is only used in the prov-o createUpdateTombstoneEvent
   */
  "@type": "schema:Person" | "schema:Organisation" | "as:Application" | "prov:Person" | "prov:SoftwareAgent";
  /**
   * Full name of the agent
   */
  "schema:name"?: string;
  /**
   * Indicates the role of the agent, https://schema.org/roleName
   */
  "schema:roleName"?: string;
  /**
   * Date the agent began the role
   */
  "schema:startDate"?: string;
  /**
   * Date the agent ended the role
   */
  "schema:endDate"?: string;
  /**
   * Order of the agent in the role. Can be used to indicate the order of importance
   */
  "ods:roleOrder"?: number;
  /**
   * Email of the agent, can be present in case the agent is a maintainer of a MAS
   */
  "schema:email"?: string;
  /**
   * URL of the agent, can be present in case the agent is a maintainer of a MAS
   */
  "schema:url"?: string;
  /**
   * Contains zero or more ods:Identifier objects
   */
  "ods:hasIdentifier"?: Identifier[];
}
/**
 * Environmental variables to supply to the a Digital Object, non-sensitive
 */
export interface EnvironmentalVariable {
  /**
   * The name of a non-sensitive property or environmental variable
   */
  "schema:name": string;
  /**
   * Value to be stored in the "name" field. NOT for sensitive information.
   */
  "schema:value": string | number | boolean;
}
/**
 * Secret Variable that need to be supplied to an Digital Object
 */
export interface SecretVariable {
  /**
   * The name of an environmental variable stored remotely
   */
  "schema:name": string;
  /**
   * The name of the key stored in the secret store. NOT the secret's value.
   */
  "ods:secretKeyRef": string;
}
